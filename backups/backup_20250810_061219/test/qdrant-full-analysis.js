/**
 * An√°lise Completa dos Dados no Qdrant
 * Data: 30/01/2025
 * 
 * Script para mapear todos os dados carregados no Qdrant
 * e analisar suas aplica√ß√µes baseadas no plano Intelligence Enrichment
 */

(async function() {
    'use strict';
    
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          üîç AN√ÅLISE COMPLETA DOS DADOS NO QDRANT              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);
    
    // Verificar se QdrantService est√° dispon√≠vel
    if (!KC.QdrantService) {
        console.error('‚ùå QdrantService n√£o est√° dispon√≠vel!');
        return;
    }
    
    const analysis = {
        connection: false,
        collection: null,
        stats: null,
        samples: [],
        categories: {},
        analysisTypes: {},
        intelligenceTypes: {},
        convergenceScores: [],
        applications: []
    };
    
    try {
        // 1. Verificar conex√£o
        console.log('1Ô∏è‚É£ VERIFICANDO CONEX√ÉO COM QDRANT...\n');
        const isConnected = await KC.QdrantService.checkConnection();
        analysis.connection = isConnected;
        
        if (!isConnected) {
            console.error('‚ùå N√£o foi poss√≠vel conectar ao Qdrant!');
            return;
        }
        console.log('‚úÖ Conex√£o estabelecida com sucesso!');
        
        // 2. Obter estat√≠sticas da cole√ß√£o
        console.log('\n2Ô∏è‚É£ OBTENDO ESTAT√çSTICAS DA COLE√á√ÉO...\n');
        const stats = await KC.QdrantService.getCollectionStats();
        analysis.stats = stats;
        
        console.log(`üìä Estat√≠sticas da cole√ß√£o "${KC.QdrantService.config.collectionName}":`);
        console.log(`   ‚Ä¢ Pontos totais: ${stats.vectors_count || 0}`);
        console.log(`   ‚Ä¢ Status: ${stats.status || 'unknown'}`);
        
        if (!stats.vectors_count || stats.vectors_count === 0) {
            console.log('\n‚ö†Ô∏è Nenhum dado encontrado no Qdrant!');
            return;
        }
        
        // 3. Buscar uma amostra de dados
        console.log('\n3Ô∏è‚É£ BUSCANDO AMOSTRA DE DADOS...\n');
        
        // Buscar at√© 100 pontos para an√°lise
        const searchResult = await KC.QdrantService.search({
            vector: new Array(768).fill(0), // Vector neutro para buscar qualquer coisa
            limit: 100,
            with_payload: true,
            with_vector: false
        });
        
        if (searchResult && searchResult.length > 0) {
            analysis.samples = searchResult;
            console.log(`‚úÖ ${searchResult.length} pontos recuperados para an√°lise`);
            
            // 4. Analisar metadados
            console.log('\n4Ô∏è‚É£ ANALISANDO METADADOS...\n');
            
            searchResult.forEach(point => {
                const payload = point.payload;
                
                // Categorias
                if (payload.categories && Array.isArray(payload.categories)) {
                    payload.categories.forEach(cat => {
                        analysis.categories[cat] = (analysis.categories[cat] || 0) + 1;
                    });
                }
                
                // Tipos de an√°lise
                if (payload.analysisType) {
                    analysis.analysisTypes[payload.analysisType] = 
                        (analysis.analysisTypes[payload.analysisType] || 0) + 1;
                }
                
                // Intelligence types (se enriquecido)
                if (payload.intelligenceType) {
                    analysis.intelligenceTypes[payload.intelligenceType] = 
                        (analysis.intelligenceTypes[payload.intelligenceType] || 0) + 1;
                }
                
                // Scores de converg√™ncia
                if (payload.convergenceScore !== undefined) {
                    analysis.convergenceScores.push(payload.convergenceScore);
                }
            });
            
            // 5. Exibir an√°lise de categorias
            console.log('üìÇ CATEGORIAS ENCONTRADAS:');
            const sortedCategories = Object.entries(analysis.categories)
                .sort((a, b) => b[1] - a[1]);
            
            if (sortedCategories.length > 0) {
                sortedCategories.forEach(([cat, count]) => {
                    console.log(`   ‚Ä¢ ${cat}: ${count} documentos`);
                });
            } else {
                console.log('   ‚ö†Ô∏è Nenhuma categoria encontrada');
            }
            
            // 6. Exibir tipos de an√°lise
            console.log('\nüìä TIPOS DE AN√ÅLISE:');
            Object.entries(analysis.analysisTypes).forEach(([type, count]) => {
                console.log(`   ‚Ä¢ ${type}: ${count} documentos`);
            });
            
            // 7. Exibir intelligence types (se houver)
            if (Object.keys(analysis.intelligenceTypes).length > 0) {
                console.log('\nüß† TIPOS DE INTELIG√äNCIA (Enriquecimento):');
                Object.entries(analysis.intelligenceTypes).forEach(([type, count]) => {
                    console.log(`   ‚Ä¢ ${type}: ${count} documentos`);
                });
            }
            
            // 8. An√°lise de converg√™ncia
            if (analysis.convergenceScores.length > 0) {
                const avgScore = analysis.convergenceScores.reduce((a, b) => a + b, 0) / 
                                analysis.convergenceScores.length;
                const maxScore = Math.max(...analysis.convergenceScores);
                const minScore = Math.min(...analysis.convergenceScores);
                
                console.log('\nüìà AN√ÅLISE DE CONVERG√äNCIA:');
                console.log(`   ‚Ä¢ Score m√©dio: ${avgScore.toFixed(2)}`);
                console.log(`   ‚Ä¢ Score m√°ximo: ${maxScore}`);
                console.log(`   ‚Ä¢ Score m√≠nimo: ${minScore}`);
                console.log(`   ‚Ä¢ Documentos com converg√™ncia: ${analysis.convergenceScores.length}`);
            }
            
            // 9. Exemplos de documentos
            console.log('\nüìÑ EXEMPLOS DE DOCUMENTOS:');
            searchResult.slice(0, 5).forEach((point, idx) => {
                const p = point.payload;
                console.log(`\n   ${idx + 1}. ${p.fileName || 'Sem nome'}`);
                console.log(`      ‚Ä¢ Chunk: ${p.chunkId || 'N/A'}`);
                console.log(`      ‚Ä¢ Categorias: ${p.categories?.join(', ') || 'Nenhuma'}`);
                console.log(`      ‚Ä¢ An√°lise: ${p.analysisType || 'N/A'}`);
                if (p.intelligenceType) {
                    console.log(`      ‚Ä¢ Intelig√™ncia: ${p.intelligenceType}`);
                }
                if (p.convergenceScore !== undefined) {
                    console.log(`      ‚Ä¢ Converg√™ncia: ${p.convergenceScore}`);
                }
                console.log(`      ‚Ä¢ Preview: "${(p.content || '').substring(0, 80)}..."`);
            });
            
            // 10. Aplica√ß√µes baseadas no Intelligence Enrichment
            console.log('\nüéØ APLICA√á√ïES IDENTIFICADAS (Intelligence Enrichment):');
            
            // An√°lise de hubs de conhecimento
            const knowledgeHubs = searchResult.filter(p => 
                p.payload.intelligenceType === 'knowledge_hub' ||
                p.payload.convergenceScore > 80
            );
            
            if (knowledgeHubs.length > 0) {
                analysis.applications.push({
                    type: 'Knowledge Hubs',
                    count: knowledgeHubs.length,
                    description: 'Documentos centrais que conectam m√∫ltiplos conceitos',
                    usage: 'Usar como pontos de entrada para explora√ß√£o de conhecimento'
                });
            }
            
            // Detectar breakthroughs
            const breakthroughs = searchResult.filter(p => 
                p.payload.analysisType === 'Breakthrough T√©cnico' ||
                p.payload.intelligenceType === 'paradigm_shifter'
            );
            
            if (breakthroughs.length > 0) {
                analysis.applications.push({
                    type: 'Technical Breakthroughs',
                    count: breakthroughs.length,
                    description: 'Momentos de inova√ß√£o e mudan√ßas de paradigma',
                    usage: 'Priorizar para estudo detalhado e aplica√ß√£o pr√°tica'
                });
            }
            
            // Detectar insights estrat√©gicos
            const strategicInsights = searchResult.filter(p => 
                p.payload.analysisType === 'Insight Estrat√©gico' ||
                p.payload.categories?.includes('estrategico')
            );
            
            if (strategicInsights.length > 0) {
                analysis.applications.push({
                    type: 'Strategic Insights',
                    count: strategicInsights.length,
                    description: 'Insights para tomada de decis√£o estrat√©gica',
                    usage: 'Usar em planejamento e defini√ß√£o de dire√ß√£o'
                });
            }
            
            // Detectar conhecimento evolutivo
            const evolutiveKnowledge = searchResult.filter(p => 
                p.payload.analysisType === 'Evolu√ß√£o Conceitual'
            );
            
            if (evolutiveKnowledge.length > 0) {
                analysis.applications.push({
                    type: 'Conceptual Evolution',
                    count: evolutiveKnowledge.length,
                    description: 'Documentos que mostram evolu√ß√£o de conceitos',
                    usage: 'Rastrear aprendizado e desenvolvimento ao longo do tempo'
                });
            }
            
            // Exibir aplica√ß√µes
            if (analysis.applications.length > 0) {
                analysis.applications.forEach(app => {
                    console.log(`\n   üìå ${app.type} (${app.count} documentos)`);
                    console.log(`      ${app.description}`);
                    console.log(`      üí° ${app.usage}`);
                });
            } else {
                console.log('\n   ‚ö†Ô∏è Nenhuma aplica√ß√£o espec√≠fica identificada ainda');
                console.log('   üí° Execute o enriquecimento com IntelligenceEnrichmentPipeline');
            }
            
            // 11. Recomenda√ß√µes
            console.log('\nüí° RECOMENDA√á√ïES BASEADAS NOS DADOS:');
            
            // Verificar se h√° enriquecimento
            const hasEnrichment = Object.keys(analysis.intelligenceTypes).length > 0;
            
            if (!hasEnrichment) {
                console.log('\n   1. üöÄ EXECUTAR ENRIQUECIMENTO:');
                console.log('      Os dados ainda n√£o foram enriquecidos com intelig√™ncia.');
                console.log('      Execute: KC.IntelligenceEnrichmentPipeline.enrichDocuments()');
            }
            
            // Verificar categoriza√ß√£o
            const categorizedRatio = searchResult.filter(p => 
                p.payload.categories && p.payload.categories.length > 0
            ).length / searchResult.length;
            
            if (categorizedRatio < 0.5) {
                console.log('\n   2. üè∑Ô∏è MELHORAR CATEGORIZA√á√ÉO:');
                console.log(`      Apenas ${(categorizedRatio * 100).toFixed(0)}% dos documentos t√™m categorias.`);
                console.log('      Categorize mais documentos para melhor organiza√ß√£o.');
            }
            
            // Sugerir explora√ß√£o
            if (analysis.categories['tecnico'] > 5) {
                console.log('\n   3. üîß EXPLORAR CONHECIMENTO T√âCNICO:');
                console.log('      Muitos documentos t√©cnicos detectados.');
                console.log('      Use busca sem√¢ntica para encontrar solu√ß√µes similares.');
            }
            
            // Sugerir an√°lise temporal
            console.log('\n   4. üìÖ AN√ÅLISE TEMPORAL:');
            console.log('      Considere analisar a evolu√ß√£o do conhecimento ao longo do tempo.');
            console.log('      Use os timestamps para identificar padr√µes de aprendizado.');
            
        } else {
            console.log('‚ö†Ô∏è Nenhum dado encontrado na busca!');
        }
        
        // 12. Salvar relat√≥rio
        console.log('\nüìä SALVANDO RELAT√ìRIO COMPLETO...');
        
        const report = {
            timestamp: new Date().toISOString(),
            analysis: analysis,
            summary: {
                totalPoints: analysis.stats?.vectors_count || 0,
                categoriesFound: Object.keys(analysis.categories).length,
                analysisTypes: Object.keys(analysis.analysisTypes).length,
                hasEnrichment: Object.keys(analysis.intelligenceTypes).length > 0,
                applications: analysis.applications.length
            }
        };
        
        // Salvar no AppState para refer√™ncia
        KC.AppState.set('lastQdrantAnalysis', report);
        
        console.log('\n‚úÖ An√°lise completa! Relat√≥rio salvo em KC.AppState.get("lastQdrantAnalysis")');
        
    } catch (error) {
        console.error('\n‚ùå ERRO NA AN√ÅLISE:', error.message);
        console.error('Stack:', error.stack);
    }
    
    console.log('\n' + '‚ïê'.repeat(65));
    console.log('üèÅ AN√ÅLISE FINALIZADA - 30/01/2025');
})();