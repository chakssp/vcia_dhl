/**
 * Exemplo de uso do PersistenceService V2
 * 
 * Este arquivo demonstra como usar o sistema de persist√™ncia unificado
 * para diferentes tipos de dados e opera√ß√µes.
 * 
 * @version 2.0.0
 * @author Claude Code + Knowledge Consolidator Team
 */

import persistenceService from '../js/services/PersistenceService.js';
import migrationManager from '../js/services/MigrationManager.js';

/**
 * Exemplos de uso b√°sico
 */
class PersistenceExamples {
  constructor() {
    this.initialized = false;
  }

  /**
   * Inicializar e executar todos os exemplos
   */
  async init() {
    console.log('=== PERSISTENCE SERVICE V2 - EXEMPLOS DE USO ===');
    
    // 1. Inicializar servi√ßo
    await this.initializeService();
    
    // 2. Opera√ß√µes b√°sicas
    await this.basicOperations();
    
    // 3. Opera√ß√µes com compress√£o
    await this.compressionExamples();
    
    // 4. Opera√ß√µes de query
    await this.queryExamples();
    
    // 5. Cache e TTL
    await this.cacheExamples();
    
    // 6. Fallback e offline
    await this.fallbackExamples();
    
    // 7. Migra√ß√£o de dados
    await this.migrationExamples();
    
    // 8. Estat√≠sticas e diagn√≥stico
    await this.statsExamples();
    
    console.log('=== EXEMPLOS CONCLU√çDOS ===');
  }

  /**
   * 1. Inicializa√ß√£o do servi√ßo
   */
  async initializeService() {
    console.log('\n--- 1. Inicializando PersistenceService ---');
    
    try {
      const success = await persistenceService.initialize();
      console.log('‚úÖ Inicializa√ß√£o:', success ? 'Sucesso' : 'Falhou');
      
      const stats = persistenceService.getStats();
      console.log('üìä Estado inicial:', {
        backend: stats.activeBackend,
        backends: stats.availableBackends,
        online: stats.online
      });
      
      this.initialized = true;
    } catch (error) {
      console.error('‚ùå Erro na inicializa√ß√£o:', error);
    }
  }

  /**
   * 2. Opera√ß√µes b√°sicas (CRUD)
   */
  async basicOperations() {
    console.log('\n--- 2. Opera√ß√µes B√°sicas (CRUD) ---');
    
    try {
      // Salvar dados simples
      console.log('üíæ Salvando dados...');
      
      await persistenceService.save('users', 'user1', {
        id: 'user1',
        name: 'Jo√£o Silva',
        email: 'joao@exemplo.com',
        preferences: {
          theme: 'dark',
          language: 'pt-BR'
        },
        createdAt: new Date().toISOString()
      });
      
      await persistenceService.save('users', 'user2', {
        id: 'user2',
        name: 'Maria Santos',
        email: 'maria@exemplo.com',
        preferences: {
          theme: 'light',
          language: 'en-US'
        },
        createdAt: new Date().toISOString()
      });
      
      console.log('‚úÖ Usu√°rios salvos');
      
      // Carregar dados
      console.log('üìñ Carregando dados...');
      
      const user1 = await persistenceService.load('users', 'user1');
      console.log('üë§ User1:', user1?.name);
      
      const userNotFound = await persistenceService.load('users', 'user999', 'Usu√°rio n√£o encontrado');
      console.log('‚ùì User999:', userNotFound);
      
      // Atualizar dados
      console.log('‚úèÔ∏è Atualizando dados...');
      
      user1.lastLogin = new Date().toISOString();
      user1.preferences.theme = 'auto';
      
      await persistenceService.save('users', 'user1', user1);
      console.log('‚úÖ User1 atualizado');
      
      // Deletar dados
      console.log('üóëÔ∏è Deletando dados...');
      
      await persistenceService.delete('users', 'user2');
      console.log('‚úÖ User2 removido');
      
      // Verificar se foi deletado
      const deletedUser = await persistenceService.load('users', 'user2');
      console.log('üîç User2 ap√≥s dele√ß√£o:', deletedUser || 'N√£o encontrado');
      
    } catch (error) {
      console.error('‚ùå Erro nas opera√ß√µes b√°sicas:', error);
    }
  }

  /**
   * 3. Exemplos com compress√£o
   */
  async compressionExamples() {
    console.log('\n--- 3. Compress√£o de Dados ---');
    
    try {
      // Dados grandes para compress√£o
      const largeData = {
        id: 'doc1',
        title: 'Documento de Exemplo',
        content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. '.repeat(100),
        metadata: {
          author: 'Sistema',
          tags: ['exemplo', 'teste', 'compress√£o'],
          version: '1.0.0'
        },
        history: Array.from({ length: 50 }, (_, i) => ({
          id: i + 1,
          timestamp: new Date(Date.now() - i * 60000).toISOString(),
          action: `A√ß√£o ${i + 1}`,
          details: `Detalhes da a√ß√£o ${i + 1} com muito texto descritivo`.repeat(5)
        }))
      };
      
      console.log('üìÑ Dados originais:', {
        tamanho: JSON.stringify(largeData).length,
        historyItems: largeData.history.length
      });
      
      // Salvar com compress√£o for√ßada
      console.log('üóúÔ∏è Salvando com compress√£o...');
      
      await persistenceService.save('documents', 'doc1', largeData, {
        compression: true
      });
      
      console.log('‚úÖ Documento salvo com compress√£o');
      
      // Carregar e verificar integridade
      console.log('üìñ Carregando documento comprimido...');
      
      const loadedDoc = await persistenceService.load('documents', 'doc1');
      
      const isEqual = JSON.stringify(largeData) === JSON.stringify(loadedDoc);
      console.log('üîç Integridade dos dados:', isEqual ? '‚úÖ OK' : '‚ùå Erro');
      
      if (loadedDoc) {
        console.log('üìä Documento carregado:', {
          title: loadedDoc.title,
          contentLength: loadedDoc.content.length,
          historyItems: loadedDoc.history.length
        });
      }
      
    } catch (error) {
      console.error('‚ùå Erro nos exemplos de compress√£o:', error);
    }
  }

  /**
   * 4. Exemplos de queries
   */
  async queryExamples() {
    console.log('\n--- 4. Opera√ß√µes de Query ---');
    
    try {
      // Salvar v√°rios produtos para demonstrar query
      const products = [
        { id: 'p1', name: 'Notebook', category: 'electronics', price: 2500, inStock: true },
        { id: 'p2', name: 'Mouse', category: 'electronics', price: 50, inStock: true },
        { id: 'p3', name: 'Cadeira', category: 'furniture', price: 300, inStock: false },
        { id: 'p4', name: 'Mesa', category: 'furniture', price: 500, inStock: true },
        { id: 'p5', name: 'Teclado', category: 'electronics', price: 150, inStock: true }
      ];
      
      console.log('üíæ Salvando produtos...');
      
      for (const product of products) {
        await persistenceService.save('products', product.id, product);
      }
      
      console.log('‚úÖ Produtos salvos');
      
      // Query simples - todos os produtos
      console.log('üîç Buscando todos os produtos...');
      
      const allProducts = await persistenceService.query('products');
      console.log('üì¶ Total de produtos:', allProducts.length);
      
      // Query com filtro (simulada - depende da implementa√ß√£o do backend)
      console.log('üîç Buscando produtos eletr√¥nicos...');
      
      const electronics = await persistenceService.query('products', {
        category: 'electronics'
      });
      
      console.log('üíª Eletr√¥nicos encontrados:', electronics.length);
      
      // Query com limite
      console.log('üîç Buscando primeiros 3 produtos...');
      
      const limitedProducts = await persistenceService.query('products', {}, {
        limit: 3
      });
      
      console.log('üìù Produtos limitados:', limitedProducts.length);
      
    } catch (error) {
      console.error('‚ùå Erro nas queries:', error);
    }
  }

  /**
   * 5. Exemplos de cache e TTL
   */
  async cacheExamples() {
    console.log('\n--- 5. Cache e TTL ---');
    
    try {
      // Dados com TTL curto
      const sessionData = {
        sessionId: 'sess_123',
        userId: 'user1',
        loginTime: new Date().toISOString(),
        permissions: ['read', 'write']
      };
      
      console.log('‚è∞ Salvando dados de sess√£o com TTL...');
      
      await persistenceService.save('sessions', 'sess_123', sessionData, {
        ttl: 5000 // 5 segundos para demonstra√ß√£o
      });
      
      console.log('‚úÖ Sess√£o salva com TTL de 5 segundos');
      
      // Carregar imediatamente (deve estar no cache)
      console.log('üìñ Carregando da cache...');
      
      const cachedSession = await persistenceService.load('sessions', 'sess_123');
      console.log('üéØ Sess√£o do cache:', cachedSession ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada');
      
      // For√ßar refresh do cache
      console.log('üîÑ For√ßando refresh...');
      
      const refreshedSession = await persistenceService.load('sessions', 'sess_123', null, {
        forceRefresh: true
      });
      
      console.log('üîÑ Sess√£o ap√≥s refresh:', refreshedSession ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada');
      
      // Aguardar expira√ß√£o do TTL (demonstra√ß√£o)
      console.log('‚è≥ Aguardando expira√ß√£o do TTL...');
      
      setTimeout(async () => {
        const expiredSession = await persistenceService.load('sessions', 'sess_123');
        console.log('‚åõ Sess√£o ap√≥s TTL:', expiredSession ? '‚ö†Ô∏è Ainda existe' : '‚úÖ Expirada');
      }, 6000);
      
    } catch (error) {
      console.error('‚ùå Erro nos exemplos de cache:', error);
    }
  }

  /**
   * 6. Exemplos de fallback e modo offline
   */
  async fallbackExamples() {
    console.log('\n--- 6. Fallback e Modo Offline ---');
    
    try {
      // Simular dados importantes
      const criticalData = {
        id: 'critical_1',
        type: 'backup',
        timestamp: new Date().toISOString(),
        data: 'Dados cr√≠ticos do sistema'
      };
      
      console.log('üõ°Ô∏è Salvando dados cr√≠ticos...');
      
      await persistenceService.save('critical', 'backup_1', criticalData);
      console.log('‚úÖ Dados cr√≠ticos salvos');
      
      // Verificar status dos backends
      const stats = persistenceService.getStats();
      console.log('üìä Status dos backends:', {
        ativo: stats.activeBackend,
        dispon√≠veis: stats.availableBackends,
        online: stats.online
      });
      
      // Simular opera√ß√£o offline (adicionada √† sync queue)
      const offlineData = {
        id: 'offline_1',
        timestamp: new Date().toISOString(),
        message: 'Dados salvos offline'
      };
      
      console.log('üì± Simulando opera√ß√£o offline...');
      
      // Essa opera√ß√£o ser√° adicionada √† sync queue se offline
      await persistenceService.save('offline', 'data_1', offlineData);
      
      console.log('‚úÖ Dados offline processados');
      console.log('üìã Sync queue size:', stats.sync.queueSize);
      
    } catch (error) {
      console.error('‚ùå Erro nos exemplos de fallback:', error);
    }
  }

  /**
   * 7. Exemplos de migra√ß√£o
   */
  async migrationExamples() {
    console.log('\n--- 7. Sistema de Migra√ß√£o ---');
    
    try {
      // Simular dados V1 no localStorage
      console.log('üì¶ Simulando dados V1...');
      
      localStorage.setItem('kc_test_data', JSON.stringify({
        version: '1.0.0',
        data: 'Dados de teste V1'
      }));
      
      localStorage.setItem('kc_old_config', JSON.stringify({
        theme: 'dark',
        language: 'pt-BR'
      }));
      
      console.log('‚úÖ Dados V1 simulados');
      
      // Analisar necessidades de migra√ß√£o
      console.log('üîç Analisando necessidades de migra√ß√£o...');
      
      const migrationAnalysis = await migrationManager.migrate({ onlyCheck: true });
      
      console.log('üìä An√°lise de migra√ß√£o:', {
        necess√°ria: migrationAnalysis.plan.total > 0,
        migra√ß√µes: migrationAnalysis.plan.total,
        tempoEstimado: migrationAnalysis.plan.estimatedTime + 'ms'
      });
      
      // Executar migra√ß√£o se necess√°rio
      if (migrationAnalysis.plan.total > 0) {
        console.log('üîÑ Executando migra√ß√£o...');
        
        const migrationResult = await migrationManager.migrate({
          skipBackup: true // Para exemplo, pular backup
        });
        
        console.log('üìä Resultado da migra√ß√£o:', {
          sucesso: migrationResult.success,
          backupId: migrationResult.backupId,
          mensagem: migrationResult.message
        });
      }
      
    } catch (error) {
      console.error('‚ùå Erro nos exemplos de migra√ß√£o:', error);
    }
  }

  /**
   * 8. Estat√≠sticas e diagn√≥stico
   */
  async statsExamples() {
    console.log('\n--- 8. Estat√≠sticas e Diagn√≥stico ---');
    
    try {
      // Estat√≠sticas do servi√ßo
      const stats = persistenceService.getStats();
      
      console.log('üìä Estat√≠sticas do PersistenceService:');
      console.log('- Backend ativo:', stats.activeBackend);
      console.log('- Backends dispon√≠veis:', stats.availableBackends);
      console.log('- Online:', stats.online);
      console.log('- Cache:', `${stats.cache.size} itens`);
      console.log('- Sync queue:', `${stats.sync.queueSize} itens`);
      
      // Diagn√≥stico completo
      const diagnosis = persistenceService.diagnose();
      
      console.log('üîß Diagn√≥stico completo:');
      console.log('- Inicializado:', diagnosis.service.initialized);
      console.log('- Backends:', Object.keys(diagnosis.backends));
      console.log('- Cache size:', diagnosis.cache.size);
      console.log('- Sync queue:', diagnosis.syncQueue.length);
      
      // Estat√≠sticas de migra√ß√£o
      const migrationStats = migrationManager.getStats();
      
      console.log('üìà Estat√≠sticas de migra√ß√£o:');
      console.log('- Vers√£o atual:', migrationStats.currentVersion);
      console.log('- Migra√ß√µes dispon√≠veis:', migrationStats.availableMigrations.length);
      console.log('- Hist√≥rico:', migrationStats.migrationHistory);
      
      // Diagn√≥stico de migra√ß√£o
      const migrationDiagnosis = await migrationManager.diagnose();
      
      console.log('üîç Diagn√≥stico de migra√ß√£o:');
      console.log('- Dados V1 restantes:', migrationDiagnosis.v1DataRemaining.needed);
      console.log('- Backups dispon√≠veis:', migrationDiagnosis.availableBackups);
      
    } catch (error) {
      console.error('‚ùå Erro nas estat√≠sticas:', error);
    }
  }

  /**
   * Limpar dados de exemplo
   */
  async cleanup() {
    console.log('\n--- Limpeza de Dados de Exemplo ---');
    
    try {
      const collections = ['users', 'documents', 'products', 'sessions', 'critical', 'offline'];
      
      for (const collection of collections) {
        await persistenceService.clear(collection);
        console.log(`üßπ Cole√ß√£o ${collection} limpa`);
      }
      
      // Limpar dados de teste do localStorage
      localStorage.removeItem('kc_test_data');
      localStorage.removeItem('kc_old_config');
      
      console.log('‚úÖ Limpeza conclu√≠da');
      
    } catch (error) {
      console.error('‚ùå Erro na limpeza:', error);
    }
  }
}

// Executar exemplos se chamado diretamente
if (typeof window !== 'undefined') {
  window.PersistenceExamples = PersistenceExamples;
  
  // Fun√ß√£o global para executar exemplos
  window.runPersistenceExamples = async function() {
    const examples = new PersistenceExamples();
    await examples.init();
    
    // Opcionalmente limpar ap√≥s 30 segundos
    setTimeout(() => {
      examples.cleanup();
    }, 30000);
  };
  
  console.log('üí° Execute runPersistenceExamples() no console para ver os exemplos');
}

export default PersistenceExamples;