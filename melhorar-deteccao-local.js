// Script para melhorar a detec√ß√£o local de tipos
function melhorarDeteccaoLocal() {
    console.log('=== MELHORANDO DETEC√á√ÉO LOCAL ===\n');
    
    // Palavras-chave expandidas baseadas no PRD
    const triggersExpandidos = {
        'Breakthrough T√©cnico': [
            // Originais
            'solu√ß√£o', 'configura√ß√£o', 'arquitetura',
            // Novos
            'implementa', 'c√≥digo', 'api', 'framework', 'algoritmo', 'sistema',
            't√©cnica', 'desenvolvimento', 'programa√ß√£o', 'software', 'stack',
            'deploy', 'docker', 'kubernetes', 'cloud', 'aws', 'azure',
            'frontend', 'backend', 'fullstack', 'database', 'sql', 'nosql',
            'performance', 'otimiza√ß√£o', 'refactor', 'debug', 'test',
            'ci/cd', 'devops', 'git', 'pipeline', 'build', 'automated'
        ],
        'Evolu√ß√£o Conceitual': [
            // Originais
            'entendimento', 'perspectiva', 'vis√£o',
            // Novos
            'conceito', 'teoria', 'paradigma', 'modelo', 'framework conceitual',
            'evolu√ß√£o', 'transforma√ß√£o', 'mudan√ßa', 'aprendizado', 'conhecimento',
            'compreens√£o', 'insight conceitual', 'abstra√ß√£o', 'generaliza√ß√£o',
            'pattern', 'princ√≠pio', 'fundamento', 'base te√≥rica'
        ],
        'Momento Decisivo': [
            // Originais
            'decis√£o', 'escolha', 'dire√ß√£o',
            // Novos
            'decisivo', 'cr√≠tico', 'turning point', 'marco', 'milestone',
            'definir', 'determinar', 'optar', 'selecionar', 'priorizar',
            'estrat√©gia', 'rumo', 'caminho', 'alternativa', 'trade-off',
            'consequ√™ncia', 'impacto', 'resultado', 'defini√ß√£o'
        ],
        'Insight Estrat√©gico': [
            // Originais
            'insight', 'transforma√ß√£o', 'breakthrough',
            // Novos
            'estrat√©gico', 'estrat√©gia', 'planejamento', 'roadmap', 'vis√£o estrat√©gica',
            'objetivo', 'meta', 'kpi', 'okr', 'business', 'neg√≥cio',
            'mercado', 'competitivo', 'vantagem', 'oportunidade', 'tend√™ncia',
            'an√°lise', 'diagn√≥stico', 'progn√≥stico', 'cen√°rio', 'futuro'
        ]
    };
    
    // C√≥digo melhorado para FileRenderer.detectAnalysisType
    const codigoMelhorado = `
detectAnalysisType(file) {
    const fileName = (file.name || '').toLowerCase();
    const content = (file.content || file.preview || '').toLowerCase();
    const combined = fileName + ' ' + content;
    
    // Contadores de matches por tipo
    const scores = {
        'Breakthrough T√©cnico': 0,
        'Evolu√ß√£o Conceitual': 0,
        'Momento Decisivo': 0,
        'Insight Estrat√©gico': 0,
        'Aprendizado Geral': 0
    };
    
    // Triggers expandidos do PRD
    const triggers = ${JSON.stringify(triggersExpandidos, null, 4)};
    
    // Calcular scores baseado em matches
    for (const [tipo, palavras] of Object.entries(triggers)) {
        palavras.forEach(palavra => {
            if (combined.includes(palavra.toLowerCase())) {
                scores[tipo]++;
            }
        });
    }
    
    // Adicionar contexto do nome do arquivo
    if (fileName.includes('.md') || fileName.includes('.txt')) {
        if (fileName.includes('plan') || fileName.includes('strategy')) {
            scores['Insight Estrat√©gico'] += 2;
        }
        if (fileName.includes('code') || fileName.includes('api') || fileName.includes('tech')) {
            scores['Breakthrough T√©cnico'] += 2;
        }
    }
    
    // Encontrar tipo com maior score
    let melhorTipo = 'Aprendizado Geral';
    let melhorScore = 0;
    
    for (const [tipo, score] of Object.entries(scores)) {
        if (score > melhorScore) {
            melhorScore = score;
            melhorTipo = tipo;
        }
    }
    
    // Log para debug
    if (melhorScore > 0) {
        console.log(\`üìä Detec√ß√£o local: \${melhorTipo} (score: \${melhorScore})\`);
    }
    
    return melhorTipo;
}`;

    console.log('C√ìDIGO MELHORADO PARA detectAnalysisType:\n');
    console.log(codigoMelhorado);
    
    console.log('\n\nPARA APLICAR:');
    console.log('1. Edite FileRenderer.js');
    console.log('2. Substitua o m√©todo detectAnalysisType (linha ~1597)');
    console.log('3. Teste com arquivos novos');
    
    // Testar com alguns exemplos
    console.log('\n\nTESTES COM A L√ìGICA MELHORADA:');
    
    const exemplos = [
        { name: 'api-design.md', content: 'Definindo a arquitetura da nova API REST' },
        { name: 'strategy-2025.txt', content: 'Planejamento estrat√©gico para expans√£o' },
        { name: 'decision-log.md', content: 'Decis√£o cr√≠tica sobre escolha de framework' },
        { name: 'learning-notes.txt', content: 'Anota√ß√µes gerais sobre o projeto' }
    ];
    
    exemplos.forEach(ex => {
        console.log(`\n"${ex.name}": "${ex.content}"`);
        
        // Simular detec√ß√£o
        const combined = (ex.name + ' ' + ex.content).toLowerCase();
        let tipo = 'Aprendizado Geral';
        
        if (combined.includes('api') || combined.includes('arquitetura')) {
            tipo = 'Breakthrough T√©cnico';
        } else if (combined.includes('estrat√©gico') || combined.includes('planejamento')) {
            tipo = 'Insight Estrat√©gico';
        } else if (combined.includes('decis√£o') || combined.includes('cr√≠tica')) {
            tipo = 'Momento Decisivo';
        }
        
        console.log(`‚Üí Tipo detectado: ${tipo}`);
    });
}

melhorarDeteccaoLocal();