/**
 * Script de Valida√ß√£o P√≥s-Deploy
 * Execute no console ap√≥s o deploy para validar o sistema
 */

console.log('üöÄ Iniciando valida√ß√£o p√≥s-deploy...\n');

async function validateDeployment() {
    const results = {
        embedding: false,
        qdrant: false,
        factory: false,
        circuitBreaker: false,
        overall: false
    };
    
    try {
        // 1. Validar Factory Pattern
        console.log('1Ô∏è‚É£ Validando Factory Pattern...');
        if (KC.ServiceFactory) {
            console.log('   ‚úÖ ServiceFactory dispon√≠vel');
            results.factory = true;
        } else {
            console.log('   ‚ùå ServiceFactory n√£o encontrado');
        }
        
        // 2. Validar Circuit Breaker
        console.log('\n2Ô∏è‚É£ Validando Circuit Breaker...');
        if (KC.CircuitBreaker && KC.breakers) {
            console.log('   ‚úÖ Circuit Breaker dispon√≠vel');
            results.circuitBreaker = true;
        } else {
            console.log('   ‚ùå Circuit Breaker n√£o encontrado');
        }
        
        // 3. Validar EmbeddingService
        console.log('\n3Ô∏è‚É£ Validando EmbeddingService...');
        if (KC.EmbeddingService) {
            const ollamaOk = await KC.EmbeddingService.checkOllamaAvailability();
            if (ollamaOk) {
                console.log('   ‚úÖ EmbeddingService funcionando');
                console.log('   ‚úÖ Ollama conectado');
                
                // Teste de embedding
                const test = await KC.EmbeddingService.generateEmbedding('teste de deploy');
                if (test && test.embedding && Array.isArray(test.embedding)) {
                    console.log(`   ‚úÖ Embedding gerado: ${test.embedding.length} dimens√µes`);
                    results.embedding = true;
                } else {
                    console.log('   ‚ùå Falha ao gerar embedding de teste');
                }
            } else {
                console.log('   ‚ùå Ollama n√£o est√° dispon√≠vel');
            }
        } else {
            console.log('   ‚ùå EmbeddingService n√£o encontrado');
        }
        
        // 4. Validar QdrantService
        console.log('\n4Ô∏è‚É£ Validando QdrantService...');
        if (KC.QdrantService) {
            const qdrantOk = await KC.QdrantService.checkConnection();
            if (qdrantOk) {
                console.log('   ‚úÖ QdrantService funcionando');
                console.log('   ‚úÖ Qdrant conectado');
                
                const stats = await KC.QdrantService.getCollectionStats();
                console.log(`   üìä Collection: ${stats.vectors_count || 0} vetores`);
                results.qdrant = true;
            } else {
                console.log('   ‚ùå Qdrant n√£o est√° dispon√≠vel');
            }
        } else {
            console.log('   ‚ùå QdrantService n√£o encontrado');
        }
        
        // 5. Teste integrado
        console.log('\n5Ô∏è‚É£ Teste de Integra√ß√£o Completa...');
        if (results.embedding && results.qdrant) {
            const testFile = {
                fileName: 'deploy-test-' + Date.now() + '.txt',
                content: 'Arquivo de teste de valida√ß√£o de deploy',
                preview: 'Teste de deploy...'
            };
            
            try {
                const enriched = await KC.QdrantService.enrichWithEmbeddings(testFile);
                if (enriched && enriched.vector && enriched.vector.length === 768) {
                    console.log('   ‚úÖ Enriquecimento funcionando');
                    
                    const insertResult = await KC.QdrantService.insertBatch([enriched]);
                    if (insertResult.success) {
                        console.log('   ‚úÖ Inser√ß√£o no Qdrant bem-sucedida');
                        results.overall = true;
                    } else {
                        console.log('   ‚ùå Falha na inser√ß√£o no Qdrant');
                    }
                } else {
                    console.log('   ‚ùå Falha no enriquecimento');
                }
            } catch (error) {
                console.log('   ‚ùå Erro no teste integrado:', error.message);
            }
        } else {
            console.log('   ‚ö†Ô∏è Pulando teste integrado (servi√ßos n√£o dispon√≠veis)');
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante valida√ß√£o:', error);
    }
    
    // Resumo Final
    console.log('\n' + '='.repeat(50));
    console.log('üìä RESUMO DA VALIDA√á√ÉO:');
    console.log('='.repeat(50));
    console.log(`Factory Pattern:    ${results.factory ? '‚úÖ' : '‚ùå'}`);
    console.log(`Circuit Breaker:    ${results.circuitBreaker ? '‚úÖ' : '‚ùå'}`);
    console.log(`EmbeddingService:   ${results.embedding ? '‚úÖ' : '‚ùå'}`);
    console.log(`QdrantService:      ${results.qdrant ? '‚úÖ' : '‚ùå'}`);
    console.log(`Integra√ß√£o:         ${results.overall ? '‚úÖ' : '‚ùå'}`);
    console.log('='.repeat(50));
    
    if (results.overall) {
        console.log('üéâ SISTEMA VALIDADO COM SUCESSO!');
        console.log('‚úÖ Pronto para uso em produ√ß√£o.');
    } else {
        console.log('‚ö†Ô∏è SISTEMA COM PROBLEMAS');
        console.log('Verifique os erros acima antes de usar em produ√ß√£o.');
    }
    
    return results;
}

// Executar valida√ß√£o
validateDeployment();