#!/bin/bash
# TESTE R√ÅPIDO - FRAMEWORK EU-VOC√ä
# Executa valida√ß√£o b√°sica antes de qualquer mudan√ßa

echo "üöÄ TESTE R√ÅPIDO - FRAMEWORK EU-VOC√ä"
echo "===================================="

# Verificar se foi passado um arquivo para testar
if [ $# -eq 0 ]; then
    echo "Uso: ./quick-test.sh <arquivo.js>"
    echo "Exemplo: ./quick-test.sh js/managers/RAGExportManager.js"
    exit 1
fi

FILE=$1

# Verificar se arquivo existe
if [ ! -f "$FILE" ]; then
    echo "‚ùå Arquivo n√£o encontrado: $FILE"
    exit 1
fi

echo "üìã Testando: $FILE"
echo ""

# TESTE 1: Sintaxe JavaScript
echo "1Ô∏è‚É£ Verificando sintaxe..."
node -c "$FILE" 2>/dev/null
if [ $? -eq 0 ]; then
    echo "   ‚úÖ Sintaxe v√°lida"
else
    echo "   ‚ùå ERRO de sintaxe!"
    node -c "$FILE"
    exit 1
fi

# TESTE 2: Verificar UTF-8 handling
echo "2Ô∏è‚É£ Verificando suporte UTF-8..."
if grep -q '\[\\^\\\\w\\\\s\]' "$FILE"; then
    echo "   ‚ö†Ô∏è AVISO: Regex problem√°tico detectado!"
    echo "   Use: [^\p{L}\p{N}\s]/gu ao inv√©s de [^\w\s]"
else
    echo "   ‚úÖ Sem problemas de UTF-8 detectados"
fi

# TESTE 3: Detectar mock data
echo "3Ô∏è‚É£ Verificando mock data..."
MOCK_COUNT=$(grep -i "mock\|stub\|fake\|dummy" "$FILE" | wc -l)
if [ $MOCK_COUNT -gt 0 ]; then
    echo "   ‚ö†Ô∏è AVISO: $MOCK_COUNT refer√™ncias a mock/stub encontradas"
    echo "   LEMBRE-SE: Usar dados REAIS sempre!"
else
    echo "   ‚úÖ Nenhum mock data detectado"
fi

# TESTE 4: Verificar console.log debug
echo "4Ô∏è‚É£ Verificando debug logs..."
DEBUG_COUNT=$(grep "console\.log" "$FILE" | grep -v "//" | wc -l)
if [ $DEBUG_COUNT -gt 5 ]; then
    echo "   ‚ö†Ô∏è AVISO: $DEBUG_COUNT console.log encontrados"
    echo "   Considere remover logs desnecess√°rios"
else
    echo "   ‚úÖ Logs em quantidade aceit√°vel"
fi

# TESTE 5: Complexidade (linhas muito longas)
echo "5Ô∏è‚É£ Verificando complexidade..."
LONG_LINES=$(awk 'length > 120' "$FILE" | wc -l)
if [ $LONG_LINES -gt 10 ]; then
    echo "   ‚ö†Ô∏è AVISO: $LONG_LINES linhas muito longas (>120 chars)"
else
    echo "   ‚úÖ C√≥digo bem formatado"
fi

echo ""
echo "===================================="
echo "üìä RESULTADO DO TESTE R√ÅPIDO"
echo "===================================="

if [ $MOCK_COUNT -eq 0 ] && [ $DEBUG_COUNT -le 5 ] && [ $LONG_LINES -le 10 ]; then
    echo "‚úÖ PASSOU - Arquivo pronto para pr√≥ximo gate"
else
    echo "‚ö†Ô∏è AVISOS DETECTADOS - Revise antes de continuar"
fi

echo ""
echo "üí° Pr√≥ximo passo: ./validate-gates.sh"