// Script para diagnosticar e corrigir problemas na an√°lise
console.log('=== DIAGN√ìSTICO DE PROBLEMAS NA AN√ÅLISE ===\n');

// 1. PROBLEMA 1: Relev√¢ncia saltando para 100%
console.log('üîç PROBLEMA 1: Relev√¢ncia saltando para 100%');
console.log('Analisando m√©todo calculateEnhancedRelevance...\n');

// Verificar a l√≥gica atual
const testFile = {
    name: 'test.md',
    analysisType: 'Breakthrough T√©cnico',
    relevanceScore: 50,
    categories: []
};

// Simular c√°lculo
let baseScore = 50 / 100; // 0.5
console.log(`Score base: ${baseScore}`);

// O problema est√° aqui - boost fixo de 25% para Breakthrough
baseScore = Math.min(baseScore + 0.25, 1.0); // 0.75
console.log(`Score ap√≥s boost do tipo: ${baseScore}`);
console.log(`Score final: ${baseScore * 100}%`); // 75%

// Mas quando o arquivo j√° tem 75% e √© reanalisado...
baseScore = 75 / 100; // 0.75
baseScore = Math.min(baseScore + 0.25, 1.0); // 1.0!
console.log(`\nProblema identificado: Score acumula boost a cada an√°lise!`);
console.log(`75% + 25% = 100% (m√°ximo)`);

// 2. PROBLEMA 2: An√°lise baseada em mapeamento direto categoria ‚Üí tipo
console.log('\n\nüîç PROBLEMA 2: An√°lise superficial por categorias');
console.log('Analisando m√©todo detectAnalysisType...\n');

// O m√©todo usa apenas keywords b√°sicas no conte√∫do
console.log('M√©todo atual usa apenas keywords:');
console.log('- "solu√ß√£o/configura√ß√£o/arquitetura" ‚Üí Breakthrough T√©cnico');
console.log('- "entendimento/perspectiva/vis√£o" ‚Üí Evolu√ß√£o Conceitual');
console.log('- "decis√£o/escolha/dire√ß√£o" ‚Üí Momento Decisivo');
console.log('- "insight/transforma√ß√£o/breakthrough" ‚Üí Insight Estrat√©gico');
console.log('- Qualquer outra coisa ‚Üí Aprendizado Geral');

console.log('\n‚ùå PROBLEMA: N√£o usa busca sem√¢ntica no Qdrant!');
console.log('‚ùå PROBLEMA: Boost de relev√¢ncia acumula a cada an√°lise!');

// 3. SOLU√á√ÉO PROPOSTA
console.log('\n\n‚úÖ SOLU√á√ïES PROPOSTAS:');

console.log('\n1. Corrigir calculateEnhancedRelevance:');
console.log(`
// N√£o aplicar boost baseado em analysisType
// Deixar apenas o c√°lculo base
calculateEnhancedRelevance(file) {
    // Retorna score base SEM boost de tipo
    let baseScore = file.relevanceScore || this.calculateRelevance(file);
    
    // Normaliza para 0-100
    if (baseScore > 100) baseScore = 100;
    if (baseScore < 0) baseScore = 0;
    
    return baseScore;
}
`);

console.log('\n2. Melhorar detec√ß√£o usando Qdrant:');
console.log(`
// J√° est√° implementado nas linhas 720-768!
// O problema √© que o fallback (detectAnalysisType) √© muito gen√©rico
`);

console.log('\n3. Corrigir mapeamento categoria ‚Üí tipo:');
console.log(`
// Em vez de mapear diretamente, usar busca sem√¢ntica
// Remover l√≥gica simplista de keywords
`);

// 4. APLICAR CORRE√á√ïES
console.log('\n\nüîß APLICANDO CORRE√á√ïES...\n');

// Backup do m√©todo original
KC.FileRenderer.prototype.calculateEnhancedRelevance_original = KC.FileRenderer.prototype.calculateEnhancedRelevance;

// Substituir por vers√£o corrigida
KC.FileRenderer.prototype.calculateEnhancedRelevance = function(file) {
    // CORRE√á√ÉO: Retorna score base SEM boost de tipo
    let baseScore = 0;
    
    // Se j√° tem relevanceScore, usa ele (pode ter boost de categorias)
    if (file.relevanceScore !== undefined && file.relevanceScore !== null) {
        baseScore = file.relevanceScore;
    } else {
        // Calcula do zero se n√£o tem score
        baseScore = this.calculateRelevance(file);
    }
    
    // Normaliza para 0-100
    if (baseScore > 100) baseScore = 100;
    if (baseScore < 0) baseScore = 0;
    
    console.log(`[calculateEnhancedRelevance] ${file.name}: score=${baseScore}% (sem boost de tipo)`);
    
    return baseScore;
};

console.log('‚úÖ calculateEnhancedRelevance corrigido!');

// Melhorar detectAnalysisType para ser menos gen√©rico
KC.FileRenderer.prototype.detectAnalysisType_original = KC.FileRenderer.prototype.detectAnalysisType;

KC.FileRenderer.prototype.detectAnalysisType = function(file) {
    const fileName = (file.name || '').toLowerCase();
    const content = (file.content || file.preview || '').toLowerCase();
    const combined = fileName + ' ' + content;
    
    // Score para cada tipo baseado em m√∫ltiplas keywords
    const scores = {
        'Breakthrough T√©cnico': 0,
        'Evolu√ß√£o Conceitual': 0,
        'Momento Decisivo': 0,
        'Insight Estrat√©gico': 0,
        'Aprendizado Geral': 0
    };
    
    // Keywords mais espec√≠ficas e com pesos
    const keywords = {
        'Breakthrough T√©cnico': [
            ['implementa√ß√£o', 3], ['c√≥digo', 3], ['algoritmo', 3], ['performance', 3],
            ['solu√ß√£o', 2], ['configura√ß√£o', 2], ['arquitetura', 2], ['t√©cnica', 2],
            ['api', 2], ['framework', 2], ['otimiza√ß√£o', 2], ['bug', 2]
        ],
        'Evolu√ß√£o Conceitual': [
            ['conceito', 3], ['teoria', 3], ['modelo', 3], ['paradigma', 3],
            ['entendimento', 2], ['perspectiva', 2], ['vis√£o', 2], ['abordagem', 2],
            ['metodologia', 2], ['princ√≠pio', 2], ['filosofia', 2]
        ],
        'Momento Decisivo': [
            ['decis√£o', 3], ['escolha', 3], ['defini√ß√£o', 3], ['aprova√ß√£o', 3],
            ['milestone', 2], ['deadline', 2], ['prioridade', 2], ['estrat√©gia', 2],
            ['planejamento', 2], ['roadmap', 2], ['objetivo', 2]
        ],
        'Insight Estrat√©gico': [
            ['insight', 3], ['descoberta', 3], ['realiza√ß√£o', 3], ['eureka', 3],
            ['transforma√ß√£o', 2], ['breakthrough', 2], ['inova√ß√£o', 2], ['revolu√ß√£o', 2],
            ['mudan√ßa', 2], ['pivot', 2], ['oportunidade', 2]
        ]
    };
    
    // Calcular scores
    for (const [type, typeKeywords] of Object.entries(keywords)) {
        for (const [keyword, weight] of typeKeywords) {
            if (combined.includes(keyword)) {
                scores[type] += weight;
            }
        }
    }
    
    // Se tem categorias, dar peso a elas tamb√©m
    if (file.categories && file.categories.length > 0) {
        file.categories.forEach(cat => {
            const catName = cat.toLowerCase();
            if (catName.includes('t√©cnic') || catName.includes('tech')) {
                scores['Breakthrough T√©cnico'] += 5;
            } else if (catName.includes('conceito') || catName.includes('teor')) {
                scores['Evolu√ß√£o Conceitual'] += 5;
            } else if (catName.includes('decis√£o') || catName.includes('estrat√©g')) {
                scores['Momento Decisivo'] += 5;
            } else if (catName.includes('insight') || catName.includes('descob')) {
                scores['Insight Estrat√©gico'] += 5;
            }
        });
    }
    
    // Encontrar tipo com maior score
    let bestType = 'Aprendizado Geral';
    let bestScore = scores['Aprendizado Geral'];
    
    for (const [type, score] of Object.entries(scores)) {
        if (score > bestScore) {
            bestScore = score;
            bestType = type;
        }
    }
    
    // Se nenhum score significativo, manter como Aprendizado Geral
    if (bestScore < 3) {
        bestType = 'Aprendizado Geral';
    }
    
    console.log(`[detectAnalysisType] ${file.name}: ${bestType} (score=${bestScore})`);
    
    return bestType;
};

console.log('‚úÖ detectAnalysisType melhorado!');

// Verificar se Qdrant est√° populado
if (KC.QdrantService) {
    KC.QdrantService.getCollectionStats().then(stats => {
        console.log('\nüìä Status do Qdrant:');
        console.log(`Pontos no Qdrant: ${stats.vectors_count}`);
        console.log(`Pontos indexados: ${stats.indexed_vectors_count}`);
        
        if (stats.vectors_count === 0) {
            console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Qdrant est√° vazio!');
            console.log('Execute o pipeline de processamento na Etapa 4 primeiro.');
        }
    });
}

console.log('\n\nüí° PR√ìXIMOS PASSOS:');
console.log('1. Recarregue a p√°gina para aplicar as corre√ß√µes');
console.log('2. Teste analisar um arquivo sem categorias');
console.log('3. Adicione categorias e analise novamente');
console.log('4. A relev√¢ncia n√£o deve mais saltar para 100%');
console.log('5. O tipo de an√°lise deve ser mais preciso');