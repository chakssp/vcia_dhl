# PRD - Consolidador de Conhecimento Pessoal
## Sistema Blueprint para Descoberta Automatizada de Momentos Decisivos

---

## üìã **RESUMO EXECUTIVO**

### **Vis√£o do Produto**
Sistema inteligente para descoberta, an√°lise e estrutura√ß√£o automatizada de momentos decisivos em bases de conhecimento pessoal, criando insights estruturados para potencializar projetos internos atrav√©s de automa√ß√£o com IA.

### **Objetivo Estrat√©gico**
Transformar conhecimento disperso em insights acion√°veis, estabelecendo uma base pr√©-estruturada que alimentar√° fluxos de automa√ß√£o IA para proposi√ß√£o de projetos internos e tomada de decis√µes estrat√©gicas.

### **Roadmap de Sprints**
- **SPRINT 1**: Sistema base com exporta√ß√£o compat√≠vel para RAG
- **SPRINT 2**: M√≥dulo de importa√ß√£o para reposit√≥rio RAG (Ollama + N8N + Langchain + Qdrant + Redis + Postgres)

---

## üéØ **ESPECIFICA√á√ïES FUNCIONAIS**

### **1. Descoberta Autom√°tica Inteligente**

**1.1 Configura√ß√£o de Fonte**
```yaml
Padr√µes de Arquivo:
  - Formatos: *.md, *.txt, *.docx, *.pdf
  - Extensibilidade: Configur√°vel via interface
  - Valida√ß√£o: Verifica√ß√£o de acessibilidade

Diret√≥rios Base:
  - Multiplataforma: Windows (C:\), Mac/Linux (/Users/, /home/)
  - Estrutura: Hier√°rquica com valida√ß√£o de caminhos
  - Exemplos padr√£o:
    - /Users/[user]/Documents/Obsidian Vaults
    - /Users/[user]/Desktop/Notas
    - C:\Users\[user]\Documents\Obsidian

M√©tricas de Data:
  - Padr√£o: Data de cria√ß√£o (maior consist√™ncia)
  - Alternativas: Modifica√ß√£o, acesso, upload
  - Filtros temporais: 1m, 3m, 6m, 1y, 2y, all
```

**1.2 Algoritmo de Descoberta**
```javascript
// Pseudo-c√≥digo do algoritmo
function discoverFiles(config) {
  const files = scanDirectories(config.baseDirs, config.filePatterns);
  const filtered = filterByTimeRange(files, config.timeRange);
  const validated = validateAccessibility(filtered);
  const metadata = extractMetadata(validated, config.dateMetric);
  
  return {
    discovered: metadata.length,
    accessible: validated.length,
    timeRange: config.timeRange
  };
}
```

### **2. Pr√©-An√°lise Local (Economia de Tokens)**

**2.1 Sistema de Relev√¢ncia**
```yaml
Palavras-Chave Estrat√©gicas:
  - Core: [decis√£o, insight, transforma√ß√£o, aprendizado, breakthrough]
  - Extens√≠veis: Configura√ß√£o por linha
  - Peso algor√≠tmico: Linear, Exponencial, Logar√≠tmico

Threshold de Relev√¢ncia:
  - Baixo: 30% (m√°xima cobertura)
  - M√©dio: 50% (balanceado) - PADR√ÉO
  - Alto: 70% (alta precis√£o)
  - Muito Alto: 90% (apenas cr√≠ticos)

Filtros Avan√ßados:
  - Tamanho: <50KB, 50-500KB, >500KB
  - Exclus√µes: Regex para temp|cache|backup
  - M√°ximo resultados: 10-1000 (padr√£o: 100)
```

**2.2 Preview Inteligente (Economia 70% Tokens)**
```javascript
// Estrutura do preview otimizado
const smartPreview = {
  firstParagraph: "primeiras 30 palavras",
  secondParagraph: "par√°grafo completo",
  lastBeforeColon: "contexto antes de ':'",
  colonPhrase: "frase que inicia com ':'",
  firstAfterColon: "primeiro par√°grafo ap√≥s ':' (30 palavras)"
};
```

### **3. An√°lise IA Seletiva**

**3.1 Configura√ß√£o de Modelos**
```yaml
Modelos Suportados:
  - Claude Sonnet 4: Equilibrado (PADR√ÉO)
  - Claude Opus 4: M√°xima qualidade
  - GPT-4: Alternativo

Limites de Token:
  - Focada: 4.000 tokens
  - Detalhada: 8.000 tokens (PADR√ÉO)
  - Completa: 16.000 tokens

Prompt Personalizado:
  Base: "Especialista em an√°lise de conhecimento pessoal"
  Foco: "1) Mudan√ßas de perspectiva, 2) Solu√ß√µes inovadoras, 3) Aprendizados significativos"
```

**3.2 Tipos de An√°lise Detectados**
```javascript
const analysisTypes = [
  {
    type: "Breakthrough T√©cnico",
    category: "Inova√ß√£o T√©cnica",
    impact: "Alto",
    triggers: ["solu√ß√£o", "configura√ß√£o", "arquitetura"]
  },
  {
    type: "Evolu√ß√£o Conceitual",
    category: "Desenvolvimento Conceitual", 
    impact: "Muito Alto",
    triggers: ["entendimento", "perspectiva", "vis√£o"]
  },
  {
    type: "Momento Decisivo",
    category: "Decis√£o Estrat√©gica",
    impact: "Alto",
    triggers: ["decis√£o", "escolha", "dire√ß√£o"]
  }
];
```

### **4. Organiza√ß√£o Inteligente**

**4.1 Estrutura de Sa√≠da**
```yaml
Destino Google Drive:
  - Pasta base: /Knowledge Consolidation
  - Estruturas: Data (YYYY/MM), Categoria, Relev√¢ncia, H√≠brida

Categorias Autom√°ticas:
  - Momentos Decisivos/T√©cnicos
  - Momentos Decisivos/Estrat√©gicos  
  - Momentos Decisivos/Conceituais
  - Insights/Desenvolvimento
  - Insights/Neg√≥cios
  - Aprendizados/Metodol√≥gicos
  - Breakthroughs/Tecnol√≥gicos
  - Reflex√µes/Pessoais

Formatos de Exporta√ß√£o:
  - Markdown (.md): Para Obsidian
  - JSON: Para integra√ß√£o RAG
  - PDF: Para documenta√ß√£o
  - HTML: Para visualiza√ß√£o
```

---

## üèóÔ∏è **ARQUITETURA T√âCNICA**

### **1. Frontend - Arquitetura Modular**

**1.1 Componentes Principais**
```javascript
// Estrutura modular implementada
window.KnowledgeConsolidator = {
  AppState: {}, // Estado central
  AppController: {}, // Navega√ß√£o e controle geral
  ConfigManager: {}, // Gerenciamento de configura√ß√µes
  DiscoveryManager: {}, // Processo de descoberta
  FileRenderer: {}, // Interface visual
  AnalysisManager: {}, // An√°lise IA
  ExportManager: {}, // Exporta√ß√£o e RAG prep
  CategoryManager: {}, // Sistema de categorias
  FilterManager: {}, // Filtros e ordena√ß√£o
  StatsManager: {}, // Estat√≠sticas tempo real
  ModalManager: {} // Controle de modais
};
```

**1.2 Sistema de Estados**
```javascript
const AppState = {
  currentStep: 1,
  configuration: {
    discovery: {},
    preAnalysis: {},
    aiAnalysis: {},
    organization: {}
  },
  files: [],
  categories: [],
  stats: {},
  timeline: [],
  currentFilter: 'all',
  currentSort: 'relevance'
};
```

### **2. Interface de Usu√°rio**

**2.1 Workflow de 4 Etapas**
```html
<!-- Navega√ß√£o visual por cards -->
<section class="workflow-grid">
  <div class="step-card" onclick="AppController.showPanel(1)">
    <div class="step-number">1</div>
    <h3>Descoberta Autom√°tica</h3>
  </div>
  <!-- ... outros steps -->
</section>
```

**2.2 Sistema de Filtros Din√¢micos**
```javascript
// Filtros com contadores em tempo real
const filters = {
  all: { count: 0, active: true },
  high: { count: 0, relevance: ">80%" },
  medium: { count: 0, relevance: "60-80%" },
  pending: { count: 0, status: "pending" },
  analyzed: { count: 0, status: "analyzed" }
};
```

**2.3 Classifica√ß√£o Multi-N√≠vel**
```javascript
// Sistema de ordena√ß√£o hier√°rquica
const sortOptions = {
  relevance: "Padr√£o por score",
  dateNew: "Data mais recente primeiro",
  dateOld: "Data mais antiga primeiro", 
  sizeLarge: "Maior tamanho primeiro",
  sizeSmall: "Menor tamanho primeiro",
  folder: "Hierarquia de pastas"
};
```

---

## üîó **PREPARA√á√ÉO PARA RAG (SPRINT 2)**

### **1. Formato de Exporta√ß√£o Qdrant-Ready**

```javascript
// Estrutura de dados compat√≠vel com Qdrant
const qdrantPayload = {
  id: "file_unique_id",
  vector: [/* 384 dimensions embedding */],
  payload: {
    // Metadados b√°sicos
    filename: "nome_arquivo.md",
    path: "/caminho/completo",
    date: "2025-07-10",
    size: "47KB",
    relevance_score: 0.92,
    
    // An√°lise IA
    analysis_type: "Breakthrough T√©cnico",
    category: "Inova√ß√£o T√©cnica", 
    impact: "Alto",
    description: "Descri√ß√£o da an√°lise...",
    keywords: ["insight", "transforma√ß√£o"],
    
    // Segmentos de conte√∫do (preview inteligente)
    content_segments: {
      first_paragraph: "Primeiras 30 palavras...",
      second_paragraph: "Segundo par√°grafo completo...",
      colon_phrase: "Frase com dois pontos...",
      last_before_colon: "Contexto antes dos dois pontos...",
      first_after_colon: "Ap√≥s dois pontos..."
    },
    
    // Metadados de processamento
    metadata: {
      processed_at: "2025-07-10T15:30:00Z",
      connections: 3,
      export_format: "json",
      ready_for_qdrant: true,
      sprint_version: "1.0"
    }
  }
};
```

### **2. Schema de Banco RAG**

**2.1 PostgreSQL - Metadados**
```sql
-- Tabela principal de documentos
CREATE TABLE knowledge_documents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    filename VARCHAR(255) NOT NULL,
    original_path TEXT NOT NULL,
    content_hash VARCHAR(64) UNIQUE,
    file_size_kb INTEGER,
    created_at TIMESTAMP,
    processed_at TIMESTAMP DEFAULT NOW(),
    
    -- An√°lise IA
    analysis_type VARCHAR(100),
    category VARCHAR(100), 
    impact_level VARCHAR(20),
    relevance_score DECIMAL(3,2),
    description TEXT,
    
    -- Estado
    status VARCHAR(20) DEFAULT 'pending',
    tags JSONB,
    
    -- Indexa√ß√£o
    search_vector tsvector,
    
    CONSTRAINT valid_relevance CHECK (relevance_score >= 0 AND relevance_score <= 1)
);

-- √çndices para performance
CREATE INDEX idx_documents_relevance ON knowledge_documents(relevance_score DESC);
CREATE INDEX idx_documents_category ON knowledge_documents(category);
CREATE INDEX idx_documents_type ON knowledge_documents(analysis_type);
CREATE INDEX idx_documents_search ON knowledge_documents USING GIN(search_vector);
CREATE INDEX idx_documents_tags ON knowledge_documents USING GIN(tags);
```

**2.2 Qdrant - Vetores Sem√¢nticos**
```python
# Configura√ß√£o de cole√ß√£o Qdrant
collection_config = {
    "name": "knowledge_moments",
    "vectors": {
        "size": 384,  # all-MiniLM-L6-v2 embeddings
        "distance": "Cosine"
    },
    "payload_schema": {
        "filename": "keyword",
        "category": "keyword", 
        "analysis_type": "keyword",
        "impact": "keyword",
        "relevance_score": "float",
        "created_date": "datetime",
        "keywords": "keyword[]",
        "content_segments": "text"
    }
}
```

**2.3 Redis - Cache e Sess√µes**
```javascript
// Estrutura de cache Redis
const cacheKeys = {
  // Cache de an√°lises
  analysis: `analysis:${fileId}`,
  
  // Cache de embeddings
  embedding: `embedding:${contentHash}`,
  
  // Cache de buscas
  search: `search:${queryHash}`,
  
  // Sess√µes de usu√°rio
  session: `session:${userId}`,
  
  // Estat√≠sticas
  stats: `stats:${date}`
};
```

### **3. Fluxo N8N para Automa√ß√£o**

**3.1 Workflow de Processamento**
```json
{
  "name": "Knowledge Processing Pipeline",
  "nodes": [
    {
      "name": "File Monitor",
      "type": "n8n-nodes-base.fileSystemTrigger",
      "parameters": {
        "path": "/knowledge/inbox",
        "events": ["add", "change"]
      }
    },
    {
      "name": "Extract Content", 
      "type": "n8n-nodes-base.code",
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extra√ß√£o inteligente de conte√∫do"
      }
    },
    {
      "name": "Generate Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "parameters": {
        "url": "http://ollama:11434/api/embeddings",
        "method": "POST",
        "body": {
          "model": "all-minilm",
          "prompt": "{{$json.content}}"
        }
      }
    },
    {
      "name": "Store in Qdrant",
      "type": "n8n-nodes-base.httpRequest", 
      "parameters": {
        "url": "http://qdrant:6333/collections/knowledge_moments/points",
        "method": "PUT"
      }
    },
    {
      "name": "Update PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "parameters": {
        "operation": "insert",
        "table": "knowledge_documents"
      }
    }
  ]
}
```

---

## üìä **ESPECIFICA√á√ïES DE DADOS**

### **1. Estrutura de Arquivo de Exporta√ß√£o**

```json
{
  "export_metadata": {
    "version": "1.0",
    "timestamp": "2025-07-10T15:30:00Z",
    "total_documents": 47,
    "processed_documents": 32,
    "sprint": "SPRINT_1",
    "compatibility": {
      "qdrant": "1.7+",
      "postgres": "14+", 
      "redis": "7+",
      "ollama": "0.1.32+"
    }
  },
  "configuration": {
    "discovery": {},
    "preAnalysis": {},
    "aiAnalysis": {},
    "organization": {}
  },
  "documents": [
    {
      "id": "file_001",
      "metadata": {},
      "analysis": {},
      "content_segments": {},
      "embeddings_ready": true,
      "rag_compatible": true
    }
  ],
  "categories": [],
  "timeline": [],
  "statistics": {}
}
```

### **2. Schema de Valida√ß√£o**

```javascript
// Valida√ß√£o de integridade antes da exporta√ß√£o
const validationRules = {
  required_fields: [
    "id", "filename", "path", "content_segments", 
    "analysis_type", "relevance_score", "keywords"
  ],
  content_segments_required: [
    "first_paragraph", "second_paragraph", 
    "colon_phrase", "last_before_colon", "first_after_colon"
  ],
  relevance_range: [0, 1],
  max_keyword_count: 10,
  max_content_length: 50000
};
```

---

## üéØ **ROADMAP DE DESENVOLVIMENTO**

### **SPRINT 1 - Sistema Base (Atual)**
- ‚úÖ Interface completa de 4 etapas
- ‚úÖ Descoberta autom√°tica configur√°vel
- ‚úÖ Preview inteligente (economia 70% tokens)
- ‚úÖ An√°lise IA sem erros
- ‚úÖ Sistema de categoriza√ß√£o incremental
- ‚úÖ Filtros din√¢micos com contadores
- ‚úÖ Classifica√ß√£o multi-n√≠vel
- ‚úÖ Exporta√ß√£o compat√≠vel RAG
- ‚úÖ Prepara√ß√£o payload Qdrant

### **SPRINT 2 - M√≥dulo RAG**
- üîÑ API de importa√ß√£o de dados SPRINT 1
- üîÑ Integra√ß√£o Ollama para embeddings
- üîÑ Pipeline N8N automatizado
- üîÑ Setup Qdrant + PostgreSQL + Redis
- üîÑ Busca sem√¢ntica funcional
- üîÑ Sistema de recomenda√ß√µes
- üîÑ Dashboard analytics
- üîÑ API de proposi√ß√£o de projetos

### **SPRINT 3 - Intelig√™ncia Avan√ßada**
- üîÑ Detec√ß√£o autom√°tica de padr√µes
- üîÑ An√°lise de conex√µes cruzadas
- üîÑ Predi√ß√£o de momentos decisivos
- üîÑ Gera√ß√£o autom√°tica de insights
- üîÑ Integra√ß√£o com calend√°rio/email
- üîÑ Relat√≥rios executivos automatizados

---

## üîß **REQUISITOS T√âCNICOS**

### **Ambiente de Desenvolvimento**
```yaml
Frontend:
  - HTML5 + CSS3 (vari√°veis CSS)
  - JavaScript ES6+ (m√≥dulos)
  - Arquitetura componental
  - Responsivo (mobile-first)

Depend√™ncias Externas:
  - Nenhuma (vanilla JavaScript)
  - Google Drive API (futuro)
  - Claude/OpenAI API (futuro)

Performance:
  - < 2s carregamento inicial
  - < 500ms resposta filtros
  - Suporte 1000+ arquivos
```

### **Integra√ß√£o SPRINT 2**
```yaml
Stack RAG:
  - Ollama: Embeddings + LLM local
  - N8N: Automa√ß√£o de workflows
  - Langchain: Framework LLM
  - Qdrant: Banco vetorial
  - Redis: Cache + sessions
  - PostgreSQL: Metadados estruturados

Conectividade:
  - Docker Swarm orquestra√ß√£o
  - Traefik proxy reverso
  - Tailscale VPN mesh
  - API REST padronizada
```

---

## üéØ **CRIT√âRIOS DE SUCESSO**

### **SPRINT 1 (Atual)**
- ‚úÖ 100% funcionalidades implementadas
- ‚úÖ 0 erros JavaScript cr√≠ticos
- ‚úÖ Exporta√ß√£o RAG-compatible
- ‚úÖ Interface responsiva completa

### **SPRINT 2 (Meta)**
- Importa√ß√£o 100% dados SPRINT 1
- Busca sem√¢ntica <200ms resposta
- Pipeline N8N 99% uptime
- Embeddings <5s por documento

### **Impacto Estrat√©gico**
- 70% redu√ß√£o tempo identifica√ß√£o insights
- 5x aumento conex√µes entre projetos
- 3x acelera√ß√£o proposi√ß√£o projetos internos
- ROI positivo em 3 meses implementa√ß√£o

---

## üöÄ **PROMPT DE RECRIA√á√ÉO**

```markdown
Crie um "Consolidador de Conhecimento Pessoal" - sistema web para descoberta automatizada de momentos decisivos em bases de conhecimento pessoal.

ARQUITETURA:
- Single Page Application (HTML/CSS/JS vanilla)
- Arquitetura modular com namespace global
- 4 etapas configur√°veis sequenciais
- Sistema de estado centralizado

FUNCIONALIDADES PRINCIPAIS:
1. Descoberta Autom√°tica: Configura√ß√£o de padr√µes arquivo, diret√≥rios, filtros temporais
2. Pr√©-An√°lise Local: Palavras-chave, threshold relev√¢ncia, preview inteligente (economia tokens)
3. An√°lise IA Seletiva: Modelos configur√°veis, an√°lise contextual, detec√ß√£o tipos momento
4. Organiza√ß√£o Inteligente: Categoriza√ß√£o, exporta√ß√£o multi-formato, prepara√ß√£o RAG

INTERFACE REQUERIDA:
- Workflow visual 4 etapas (cards clic√°veis)
- Filtros din√¢micos com badges contadores
- Classifica√ß√£o multi-n√≠vel (data, tamanho, relev√¢ncia, pasta)
- Sistema categorias incrementais (cores personaliz√°veis)
- Estat√≠sticas tempo real
- Modais para conte√∫do/configura√ß√£o

PREVIEW INTELIGENTE (economia 70% tokens):
- Primeiras 30 palavras
- Segundo par√°grafo completo  
- √öltimo par√°grafo antes ':'
- Frase que inicia com ':'
- Primeiro par√°grafo ap√≥s ':' (30 palavras)

EXPORTA√á√ÉO RAG-COMPATIBLE:
- Formato JSON estruturado
- Payload Qdrant com embeddings mock (384 dim)
- Metadados completos para PostgreSQL
- Segmentos conte√∫do otimizados
- Prepara√ß√£o pipeline N8N

ESTADOS ARQUIVO:
- Pending: Analisar IA, Ver Conte√∫do, Categorizar, Arquivar
- Analyzed: Salvar Timeline, An√°lise Completa, Exportar, Ver Conte√∫do, Categorizar  
- Archived: Ver Conte√∫do, Restaurar

REQUISITOS T√âCNICOS:
- Componentes modulares (window.namespace)
- Tratamento robusto erros
- Responsivo mobile-first
- Sem depend√™ncias externas
- Performance <2s carregamento

OBJETIVO: Criar base estruturada para SPRINT 2 (RAG com Ollama+N8N+Qdrant+Redis+Postgres) alimentando automa√ß√£o IA para proposi√ß√£o projetos internos.
```