/**
 * Teste de Enriquecimento com Embeddings
 * Valida a nova funcionalidade do QdrantService
 */

console.log('üß™ TESTE: Enriquecimento com Embeddings no KC');
console.log('=============================================\n');

// Fun√ß√£o de teste principal
async function testEmbeddingsEnrichment() {
    try {
        // 1. Verificar se KC est√° carregado
        if (typeof KC === 'undefined') {
            throw new Error('KC n√£o est√° carregado. Execute este teste no console do navegador.');
        }

        console.log('‚úÖ KC carregado');
        console.log('üìä Servi√ßos dispon√≠veis:');
        console.log('  - QdrantService:', !!KC.QdrantService);
        console.log('  - EmbeddingService:', !!KC.EmbeddingService);
        console.log('  - FileRenderer:', !!KC.FileRenderer);
        console.log('');

        // 2. Verificar conex√µes
        console.log('üîå Verificando conex√µes...');
        
        const qdrantConnected = await KC.QdrantService.checkConnection();
        console.log(`  Qdrant: ${qdrantConnected ? '‚úÖ Conectado' : '‚ùå Desconectado'}`);
        
        const ollamaAvailable = await KC.EmbeddingService.checkOllamaAvailability();
        console.log(`  Ollama: ${ollamaAvailable ? '‚úÖ Dispon√≠vel' : '‚ùå Indispon√≠vel'}`);
        console.log('');

        // 3. Pegar arquivo real do sistema
        console.log('üìÑ Selecionando arquivo de teste...');
        
        const files = KC.AppState.get('files') || [];
        if (files.length === 0) {
            console.log('‚ö†Ô∏è Nenhum arquivo descoberto. Fa√ßa a descoberta primeiro.');
            return;
        }

        // Procurar pelo FRAMEWORK-TRABALHO-EU-VOCE.md ou pegar o primeiro
        let testFile = files.find(f => f.fileName === 'FRAMEWORK-TRABALHO-EU-VOCE.md') || files[0];
        
        console.log(`  Arquivo selecionado: ${testFile.fileName}`);
        console.log(`  Tamanho: ${testFile.size} bytes`);
        console.log(`  Categoria: ${testFile.category || testFile.categories?.[0] || 'N/A'}`);
        console.log('');

        // 4. Testar enriquecimento
        console.log('üîÑ Testando enriquecimento com embeddings...');
        console.log('');
        
        const startTime = Date.now();
        const enrichedDoc = await KC.QdrantService.enrichWithEmbeddings(testFile);
        const endTime = Date.now();
        
        console.log(`‚è±Ô∏è Tempo de enriquecimento: ${endTime - startTime}ms`);
        console.log('');

        // 5. Validar resultado
        console.log('üìä Validando documento enriquecido:');
        console.log('');
        
        // Validar estrutura b√°sica
        console.assert(enrichedDoc.id, 'Documento deve ter ID');
        console.assert(enrichedDoc.vector, 'Documento deve ter vector');
        console.assert(enrichedDoc.payload, 'Documento deve ter payload');
        
        console.log('‚úÖ Estrutura b√°sica v√°lida');
        console.log(`  - ID: ${enrichedDoc.id}`);
        console.log(`  - Vector: ${enrichedDoc.vector.length} dimens√µes`);
        console.log('');

        // Validar embeddings
        console.log('üß† Validando embeddings:');
        console.assert(Array.isArray(enrichedDoc.vector), 'Vector deve ser array');
        console.assert(enrichedDoc.vector.length === 768, 'Vector deve ter 768 dimens√µes');
        console.assert(enrichedDoc.vector.every(v => typeof v === 'number'), 'Vector deve conter apenas n√∫meros');
        
        console.log(`  ‚úÖ Vector v√°lido: ${enrichedDoc.vector.length} dimens√µes`);
        console.log(`  ‚úÖ Valores: [${enrichedDoc.vector.slice(0, 3).map(v => v.toFixed(3)).join(', ')}...]`);
        console.log('');

        // Validar metadata
        console.log('üìã Validando metadata:');
        const metadata = enrichedDoc.payload.metadata;
        console.assert(metadata, 'Deve ter metadata');
        console.assert(metadata.embeddingModel === 'nomic-embed-text', 'Deve ter modelo correto');
        console.assert(metadata.embeddingDimensions === 768, 'Deve ter dimens√µes corretas');
        
        console.log('  ‚úÖ Metadata v√°lida:');
        console.log(`    - Modelo: ${metadata.embeddingModel}`);
        console.log(`    - Dimens√µes: ${metadata.embeddingDimensions}`);
        console.log(`    - Categoria: ${metadata.category}`);
        console.log(`    - Processado em: ${metadata.processedAt}`);
        console.log('');

        // Validar converg√™ncia
        console.log('üéØ Validando converg√™ncia multi-dimensional:');
        const convergence = enrichedDoc.payload.convergence;
        console.assert(convergence, 'Deve ter converg√™ncia');
        console.assert(convergence.dimensions, 'Deve ter dimens√µes');
        console.assert(convergence.totalScore >= 0 && convergence.totalScore <= 1, 'Score deve estar entre 0 e 1');
        
        console.log('  ‚úÖ Converg√™ncia v√°lida:');
        console.log(`    - Score Total: ${(convergence.totalScore * 100).toFixed(1)}%`);
        console.log(`    - Temporal: ${(convergence.dimensions.temporal * 100).toFixed(0)}%`);
        console.log(`    - Categoria: ${(convergence.dimensions.category * 100).toFixed(0)}%`);
        console.log(`    - Import√¢ncia: ${(convergence.dimensions.importance * 100).toFixed(0)}%`);
        console.log(`    - Clusters: [${convergence.semanticClusters.join(', ')}]`);
        console.log(`    - Conceitos: [${convergence.relatedConcepts.join(', ')}]`);
        console.log('');

        // 6. Testar inser√ß√£o no Qdrant
        console.log('üíæ Testando inser√ß√£o no Qdrant...');
        
        try {
            const insertResult = await KC.QdrantService.processAndInsertFile(testFile);
            
            if (insertResult.success) {
                console.log('  ‚úÖ Arquivo inserido com sucesso no Qdrant!');
                console.log(`  - Points inseridos: ${KC.QdrantService.stats.pointsInserted}`);
            } else {
                console.log('  ‚ö†Ô∏è Falha na inser√ß√£o:', insertResult);
            }
        } catch (error) {
            console.log('  ‚ùå Erro na inser√ß√£o:', error.message);
        }
        console.log('');

        // 7. Testar busca sem√¢ntica
        console.log('üîç Testando busca sem√¢ntica...');
        
        const searchQuery = "sistema de valida√ß√£o com gates para garantir qualidade";
        console.log(`  Query: "${searchQuery}"`);
        
        try {
            const searchResults = await KC.QdrantService.searchByText(searchQuery, {
                limit: 5,
                scoreThreshold: 0.5
            });
            
            console.log(`  ‚úÖ Resultados encontrados: ${searchResults.length}`);
            
            searchResults.slice(0, 3).forEach((result, idx) => {
                console.log(`\n  ${idx + 1}. Score: ${(result.score * 100).toFixed(1)}%`);
                console.log(`     Arquivo: ${result.payload?.fileName || 'N/A'}`);
                console.log(`     Categoria: ${result.payload?.metadata?.category || 'N/A'}`);
            });
        } catch (error) {
            console.log('  ‚ö†Ô∏è Erro na busca:', error.message);
        }
        console.log('');

        // 8. Resumo final
        console.log('=' .repeat(60));
        console.log('\n‚úÖ TESTE CONCLU√çDO COM SUCESSO!');
        console.log('\nüìä Resumo:');
        console.log('  1. Enriquecimento com embeddings: ‚úÖ Funcionando');
        console.log('  2. Converg√™ncia multi-dimensional: ‚úÖ Calculada');
        console.log('  3. Estrutura de dados: ‚úÖ Compat√≠vel');
        console.log('  4. Integra√ß√£o com Qdrant: ‚úÖ Operacional');
        console.log('\nüöÄ Sistema pronto para processar os 2.245 arquivos!');
        
        return enrichedDoc;

    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
        console.error(error.stack);
        return null;
    }
}

// Fun√ß√£o auxiliar para processar m√∫ltiplos arquivos
async function testBatchProcessing(limit = 5) {
    console.log(`\nüì¶ Testando processamento em batch (${limit} arquivos)...`);
    console.log('=' .repeat(60) + '\n');
    
    const files = KC.AppState.get('files') || [];
    if (files.length === 0) {
        console.log('‚ö†Ô∏è Nenhum arquivo para processar');
        return;
    }
    
    const testBatch = files.slice(0, limit);
    console.log(`Processando ${testBatch.length} arquivos...`);
    
    const result = await KC.QdrantService.processFilesBatch(testBatch, {
        batchSize: 2
    });
    
    console.log('\nüìä Resultado do batch:');
    console.log(`  - Total: ${result.total}`);
    console.log(`  - Sucesso: ${result.successful}`);
    console.log(`  - Falhas: ${result.failed}`);
    
    return result;
}

// Exportar fun√ß√µes para uso no console
window.testEmbeddings = testEmbeddingsEnrichment;
window.testBatch = testBatchProcessing;

// Instru√ß√µes
console.log('üìå Instru√ß√µes de uso:');
console.log('');
console.log('1. Execute no console do navegador (F12):');
console.log('   await testEmbeddings()     // Testa enriquecimento com 1 arquivo');
console.log('   await testBatch(10)        // Testa batch com 10 arquivos');
console.log('');
console.log('2. Pr√©-requisitos:');
console.log('   - KC carregado (http://127.0.0.1:5500)');
console.log('   - Arquivos descobertos');
console.log('   - Ollama rodando (localhost:11434)');
console.log('   - Qdrant acess√≠vel (qdr.vcia.com.br:6333)');
console.log('');
console.log('Digite: await testEmbeddings() para come√ßar o teste');