/**
 * test-manual-triple-extraction.js
 * 
 * Teste manual isolado para valida√ß√£o de extra√ß√£o de triplas
 * com arquivo real fornecido pelo usu√°rio
 * 
 * @date 2025-01-17
 */

(function(window) {
    'use strict';

    const KC = window.KnowledgeConsolidator;
    
    /**
     * Fun√ß√£o de teste manual com arquivo real
     * N√ÉO afeta o sistema em produ√ß√£o - totalmente isolado
     */
    async function testarExtracao(arquivo) {
        console.log('üß™ TESTE MANUAL DE EXTRA√á√ÉO DE TRIPLAS\n');
        console.log('‚ÑπÔ∏è Este √© um teste ISOLADO - n√£o afeta dados em produ√ß√£o\n');
        
        try {
            // Verificar se componentes est√£o dispon√≠veis
            if (!KC.TripleStoreService) {
                console.error('‚ùå TripleStoreService n√£o est√° dispon√≠vel');
                return;
            }

            // Criar inst√¢ncia isolada do servi√ßo
            console.log('1Ô∏è‚É£ Criando inst√¢ncia isolada do TripleStoreService...');
            // Criar uma nova inst√¢ncia do TripleStoreService
            const TripleStoreService = KC.TripleStoreService.constructor;
            const servicoTeste = new TripleStoreService();
            await servicoTeste.inicializar();
            console.log('‚úÖ Servi√ßo inicializado\n');

            // Preparar arquivo para teste
            console.log('2Ô∏è‚É£ Preparando arquivo para an√°lise...');
            const arquivoTeste = {
                id: `test_manual_${Date.now()}`,
                name: arquivo.name || 'arquivo_teste.txt',
                path: arquivo.path || '/test/manual/',
                content: arquivo.content || '',
                type: arquivo.type || 'text/plain',
                size: arquivo.size || arquivo.content?.length || 0,
                lastModified: arquivo.lastModified || Date.now(),
                categories: arquivo.categories || [],
                relevanceScore: arquivo.relevanceScore || 0,
                analysisType: arquivo.analysisType || null,
                preview: arquivo.preview || arquivo.content?.substring(0, 200)
            };

            console.log('üìÑ Arquivo preparado:');
            console.log(`  - Nome: ${arquivoTeste.name}`);
            console.log(`  - Tamanho: ${arquivoTeste.size} bytes`);
            console.log(`  - Tipo: ${arquivoTeste.type}`);
            console.log(`  - Preview: ${arquivoTeste.preview?.substring(0, 100)}...`);
            console.log('');

            // Extrair triplas
            console.log('3Ô∏è‚É£ Extraindo triplas do arquivo...');
            const inicio = Date.now();
            const triplas = await servicoTeste.extrairTriplas(arquivoTeste);
            const duracao = Date.now() - inicio;

            console.log(`‚úÖ Extra√ß√£o conclu√≠da em ${duracao}ms\n`);

            // Analisar resultados
            console.log('4Ô∏è‚É£ RESULTADOS DA EXTRA√á√ÉO:');
            console.log(`üìä Total de triplas extra√≠das: ${triplas.length}\n`);

            // Vari√°veis para an√°lise
            const porPredicado = {};
            let confiancaMedia = 0;
            let fontes = [];

            if (triplas.length > 0) {
                // Agrupar por tipo de predicado
                triplas.forEach(tripla => {
                    const predicado = tripla.presente.valor;
                    if (!porPredicado[predicado]) {
                        porPredicado[predicado] = [];
                    }
                    porPredicado[predicado].push(tripla);
                });

                console.log('üìã Triplas por tipo de rela√ß√£o:');
                Object.entries(porPredicado).forEach(([predicado, triplasDoTipo]) => {
                    console.log(`\n  üîó ${predicado} (${triplasDoTipo.length}):`);
                    triplasDoTipo.slice(0, 3).forEach(t => {
                        console.log(`     ${t.legado.valor} ‚Üí ${t.objetivo.valor}`);
                    });
                    if (triplasDoTipo.length > 3) {
                        console.log(`     ... e mais ${triplasDoTipo.length - 3}`);
                    }
                });

                // Mostrar algumas triplas completas
                console.log('\nüìù Exemplos de triplas completas:');
                triplas.slice(0, 5).forEach((tripla, idx) => {
                    console.log(`\n  Tripla ${idx + 1}:`);
                    console.log(`    Legado: ${tripla.legado.valor}`);
                    console.log(`    Rela√ß√£o: ${tripla.presente.valor}`);
                    console.log(`    Objetivo: ${tripla.objetivo.valor}`);
                    console.log(`    Confian√ßa: ${tripla.metadados.confianca}`);
                    console.log(`    Fonte: ${tripla.metadados.fonte}`);
                });

                // Estat√≠sticas
                console.log('\nüìà Estat√≠sticas:');
                confiancaMedia = triplas.reduce((acc, t) => 
                    acc + (t.metadados.confianca || 0), 0) / triplas.length;
                console.log(`  - Confian√ßa m√©dia: ${confiancaMedia.toFixed(2)}`);
                
                fontes = [...new Set(triplas.map(t => t.metadados.fonte))];
                console.log(`  - Fontes de extra√ß√£o: ${fontes.join(', ')}`);
            }

            // Testar gera√ß√£o de insights
            console.log('\n5Ô∏è‚É£ Testando gera√ß√£o de insights...');
            const insights = await servicoTeste.gerarInsights({
                arquivo: arquivoTeste.id
            });

            console.log(`‚úÖ ${insights.length} insights gerados`);
            if (insights.length > 0) {
                console.log('\nüí° Insights encontrados:');
                insights.slice(0, 3).forEach(insight => {
                    console.log(`  - ${insight.titulo}: ${insight.descricao}`);
                });
            }

            // Testar export
            console.log('\n6Ô∏è‚É£ Testando formatos de exporta√ß√£o...');
            
            // Qdrant
            const dadosQdrant = await servicoTeste.exportarParaIntegracao('qdrant');
            console.log(`  ‚úÖ Formato Qdrant: ${dadosQdrant.length} pontos preparados`);
            if (dadosQdrant.length > 0) {
                console.log('     Exemplo:', JSON.stringify(dadosQdrant[0], null, 2).substring(0, 200) + '...');
            }

            // N8N
            const dadosN8N = await servicoTeste.exportarParaIntegracao('n8n');
            console.log(`  ‚úÖ Formato N8N: ${dadosN8N.nodes.length} n√≥s, ${dadosN8N.edges.length} arestas`);

            // Limpar dados de teste
            console.log('\n7Ô∏è‚É£ Limpando dados de teste...');
            servicoTeste.limpar();
            console.log('‚úÖ Dados de teste removidos\n');

            console.log('üéâ TESTE CONCLU√çDO COM SUCESSO!');
            console.log('‚ÑπÔ∏è Nenhum dado foi salvo no sistema em produ√ß√£o.\n');

            // Retornar resultados para an√°lise
            return {
                sucesso: true,
                arquivo: arquivoTeste.name,
                triplas: triplas.length,
                insights: insights.length,
                duracao: duracao,
                detalhes: {
                    porPredicado,
                    confiancaMedia: confiancaMedia || 0,
                    fontes
                }
            };

        } catch (erro) {
            console.error('‚ùå ERRO durante o teste:', erro);
            console.error(erro.stack);
            return {
                sucesso: false,
                erro: erro.message
            };
        }
    }

    /**
     * Fun√ß√£o auxiliar para criar arquivo de teste a partir de conte√∫do
     */
    function criarArquivoTeste(conteudo, nome = 'teste.md', tipo = 'text/markdown') {
        return {
            name: nome,
            content: conteudo,
            type: tipo,
            size: conteudo.length,
            lastModified: Date.now()
        };
    }

    /**
     * Exemplos de uso
     */
    function mostrarExemplos() {
        console.log('üìö EXEMPLOS DE USO:\n');
        
        console.log('1. Com conte√∫do direto:');
        console.log(`   const arquivo = criarArquivoTeste('Seu conte√∫do aqui...', 'meu-arquivo.md');`);
        console.log(`   testarExtracao(arquivo);\n`);
        
        console.log('2. Com arquivo completo:');
        console.log(`   const arquivo = {
       name: 'projeto.md',
       content: 'Conte√∫do do projeto...',
       categories: ['Projetos', 'IA'],
       relevanceScore: 85
   };`);
        console.log(`   testarExtracao(arquivo);\n`);
        
        console.log('3. Teste r√°pido:');
        console.log(`   testarExtracaoRapida('Este √© um teste de Machine Learning com Python');\n`);
    }

    /**
     * Teste r√°pido com string
     */
    async function testarExtracaoRapida(conteudo) {
        const arquivo = criarArquivoTeste(conteudo, 'teste-rapido.txt', 'text/plain');
        return await testarExtracao(arquivo);
    }

    // Expor fun√ß√µes globalmente
    window.testarExtracao = testarExtracao;
    window.criarArquivoTeste = criarArquivoTeste;
    window.testarExtracaoRapida = testarExtracaoRapida;
    window.mostrarExemplosExtracao = mostrarExemplos;

    // Mensagem de carregamento
    console.log('üß™ Teste manual de extra√ß√£o carregado!');
    console.log('üìù Use: testarExtracao(arquivo) para testar com seu arquivo');
    console.log('üí° Use: mostrarExemplosExtracao() para ver exemplos de uso');

})(window);