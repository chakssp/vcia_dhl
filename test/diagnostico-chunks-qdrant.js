/**
 * Diagn√≥stico Completo do Sistema de Chunks no Qdrant
 * Data: 06/08/2025
 * Problema Reportado: "chunks n√£o est√£o sendo feitos, apenas um arquivo √© carregado"
 */

console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('     DIAGN√ìSTICO COMPLETO - SISTEMA DE CHUNKS QDRANT');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('Data:', new Date().toISOString());
console.log('');

// Fun√ß√£o auxiliar para log estruturado
function logSection(title, content) {
    console.log(`\n${'‚îÄ'.repeat(60)}`);
    console.log(`üìã ${title}`);
    console.log('‚îÄ'.repeat(60));
    if (typeof content === 'object') {
        console.log(JSON.stringify(content, null, 2));
    } else {
        console.log(content);
    }
}

// Verificar se KC est√° carregado
if (typeof KC === 'undefined') {
    console.error('‚ùå ERRO: Sistema KC n√£o est√° carregado!');
    console.log('Por favor, execute este script na p√°gina index.html ap√≥s carregar o sistema.');
    return;
}

// Fun√ß√£o principal de diagn√≥stico
async function diagnosticarSistemaChunks() {
    try {
        logSection('1. VERIFICANDO CONEX√ÉO COM QDRANT', '');
        
        const qdrantStatus = await KC.QdrantService.checkConnection();
        console.log('‚úÖ Conex√£o com Qdrant:', qdrantStatus ? 'OK' : 'FALHA');
        
        const stats = await KC.QdrantService.getCollectionStats();
        console.log('üìä Total de pontos no Qdrant:', stats.vectors_count);
        
        // Verificar arquivos no sistema
        logSection('2. VERIFICANDO ARQUIVOS NO SISTEMA', '');
        
        const files = KC.AppState.get('files') || [];
        console.log('üìÅ Total de arquivos descobertos:', files.length);
        
        const filesWithContent = files.filter(f => f.content && f.content.length > 1000);
        console.log('üìù Arquivos com conte√∫do completo (>1000 chars):', filesWithContent.length);
        
        const filesWithPreview = files.filter(f => f.preview && !f.content);
        console.log('üëÅÔ∏è Arquivos apenas com preview:', filesWithPreview.length);
        
        // Verificar RAGExportManager
        logSection('3. VERIFICANDO RAGEXPORTMANAGER', '');
        
        if (KC.RAGExportManager) {
            console.log('‚úÖ RAGExportManager est√° carregado');
            
            // Verificar se o m√©todo de chunking est√° correto
            if (KC.RAGExportManager.createChunks) {
                console.log('‚úÖ M√©todo createChunks existe');
                
                // Testar com um arquivo exemplo
                if (filesWithContent.length > 0) {
                    const testFile = filesWithContent[0];
                    console.log(`\nüß™ Testando chunking com arquivo: ${testFile.name}`);
                    console.log(`üìè Tamanho do conte√∫do: ${testFile.content.length} caracteres`);
                    
                    // Criar chunks de teste
                    const chunks = KC.RAGExportManager.createChunks(testFile.content, {
                        chunkSize: 500,
                        chunkOverlap: 50
                    });
                    
                    console.log(`‚úÇÔ∏è Chunks criados: ${chunks.length}`);
                    
                    if (chunks.length > 0) {
                        console.log('\nüì¶ Estrutura do primeiro chunk:');
                        const firstChunk = chunks[0];
                        console.log({
                            index: firstChunk.index,
                            chunkIndex: firstChunk.chunkIndex,
                            size: firstChunk.content ? firstChunk.content.length : 0,
                            hasContent: !!firstChunk.content
                        });
                    }
                }
            } else {
                console.error('‚ùå M√©todo createChunks N√ÉO existe!');
            }
        } else {
            console.error('‚ùå RAGExportManager N√ÉO est√° carregado!');
        }
        
        // Verificar QdrantManager
        logSection('4. VERIFICANDO QDRANTMANAGER', '');
        
        if (KC.QdrantManager) {
            console.log('‚úÖ QdrantManager est√° carregado');
            
            // Verificar m√©todo checkDuplicate
            if (KC.QdrantManager.checkDuplicate) {
                console.log('‚úÖ M√©todo checkDuplicate existe');
                
                // Testar detec√ß√£o de duplicatas
                const testData = {
                    fileName: 'test.md',
                    filePath: '/test/test.md',
                    chunkIndex: 0
                };
                
                const dupResult = await KC.QdrantManager.checkDuplicate(testData);
                console.log('üîç Teste de duplicata:', dupResult);
            }
        } else {
            console.error('‚ùå QdrantManager N√ÉO est√° carregado!');
        }
        
        // Verificar dados no Qdrant
        logSection('5. ANALISANDO DADOS NO QDRANT', '');
        
        try {
            const points = await KC.QdrantService.scrollPoints({
                limit: 100,
                withPayload: true
            });
            
            if (points && points.points && points.points.length > 0) {
                console.log(`üìä Analisando ${points.points.length} pontos...`);
                
                // Agrupar por arquivo
                const fileGroups = {};
                points.points.forEach(point => {
                    const fileName = point.payload.fileName || 'unknown';
                    const chunkIndex = point.payload.chunkIndex;
                    
                    if (!fileGroups[fileName]) {
                        fileGroups[fileName] = {
                            chunks: [],
                            hasChunkIndex: false
                        };
                    }
                    
                    fileGroups[fileName].chunks.push(chunkIndex);
                    if (chunkIndex !== undefined && chunkIndex !== null && chunkIndex !== -1) {
                        fileGroups[fileName].hasChunkIndex = true;
                    }
                });
                
                console.log('\nüìÅ Arquivos e seus chunks:');
                Object.entries(fileGroups).forEach(([fileName, info]) => {
                    console.log(`\n  üìÑ ${fileName}`);
                    console.log(`     Chunks: ${info.chunks.length}`);
                    console.log(`     Tem chunkIndex? ${info.hasChunkIndex ? '‚úÖ' : '‚ùå'}`);
                    if (info.chunks.length <= 5) {
                        console.log(`     √çndices: [${info.chunks.join(', ')}]`);
                    }
                });
                
                // Verificar problema espec√≠fico
                const problemFiles = Object.entries(fileGroups).filter(([_, info]) => 
                    info.chunks.length === 1 || !info.hasChunkIndex
                );
                
                if (problemFiles.length > 0) {
                    console.log('\n‚ö†Ô∏è ARQUIVOS COM PROBLEMA:');
                    problemFiles.forEach(([fileName, info]) => {
                        console.log(`  ‚ùå ${fileName}: ${info.chunks.length} chunk(s), chunkIndex: ${info.hasChunkIndex ? 'SIM' : 'N√ÉO'}`);
                    });
                }
            } else {
                console.log('‚ö†Ô∏è Nenhum ponto encontrado no Qdrant');
            }
        } catch (error) {
            console.error('‚ùå Erro ao buscar dados do Qdrant:', error);
        }
        
        // Recomenda√ß√µes
        logSection('6. DIAGN√ìSTICO E RECOMENDA√á√ïES', '');
        
        console.log('üîç AN√ÅLISE DO PROBLEMA:');
        console.log('');
        
        if (filesWithPreview.length > filesWithContent.length) {
            console.log('‚ùå PROBLEMA IDENTIFICADO: Maioria dos arquivos tem apenas preview!');
            console.log('   ‚Üí Solu√ß√£o: Carregar conte√∫do completo antes de processar');
        }
        
        console.log('\nüìã CHECKLIST DE VERIFICA√á√ÉO:');
        console.log('1. [ ] Arquivos t√™m conte√∫do completo carregado?');
        console.log('2. [ ] RAGExportManager est√° criando m√∫ltiplos chunks?');
        console.log('3. [ ] Campo chunkIndex est√° sendo inclu√≠do no payload?');
        console.log('4. [ ] QdrantManager est√° verificando chunkIndex corretamente?');
        console.log('5. [ ] Dados est√£o sendo inseridos sem serem marcados como duplicatas?');
        
        console.log('\nüîß A√á√ïES CORRETIVAS:');
        console.log('1. Executar: KC.FileRenderer.loadFullContent() para cada arquivo');
        console.log('2. Verificar: RAGExportManager linha 819 - campo chunkIndex presente?');
        console.log('3. Confirmar: QdrantManager.checkDuplicate() considera chunkIndex');
        console.log('4. Testar: Processar um arquivo e verificar m√∫ltiplos chunks no Qdrant');
        
    } catch (error) {
        console.error('‚ùå Erro durante diagn√≥stico:', error);
    }
}

// Executar diagn√≥stico
console.log('üöÄ Iniciando diagn√≥stico...\n');
diagnosticarSistemaChunks();